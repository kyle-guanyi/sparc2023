import sys
import logging
import pymysql
import random
import os
from datetime import date
from decimal import Decimal

# rds settings
user_name = os.environ['RDS_USERNAME']
password = os.environ['RDS_PASSWORD']
rds_host = os.environ['RDS_HOST']
db_name = os.environ['RDS_DATABASE_NAME']
port = os.environ['RDS_PORT']

logger = logging.getLogger()
logger.setLevel(logging.INFO)

# create the database connection outside of the handler to allow connections to be
# re-used by subsequent function invocations.
try:
    conn = pymysql.connect(host=rds_host, user=user_name, passwd=password, db=db_name, connect_timeout=5)
except pymysql.MySQLError as e:
    logger.error("ERROR: Unexpected error: Could not connect to MySQL instance.")
    logger.error(e)
    sys.exit()

logger.info("SUCCESS: Connection to RDS MySQL instance succeeded")


def lambda_handler(event, context):
    # create cursor to interact with table
    cursor = conn.cursor()

    # fetch number of rows in database
    query = "SELECT COUNT(*) FROM TV_SERIES_POPULAR_LIST"
    cursor.execute(query)
    numRows = cursor.fetchone()[0]

    # random number of rows to be changed
    randNumRows = random.randint(1, 10)

    # prepare to create random IDs
    unique_indices = random.sample(range(1, numRows + 1), randNumRows)

    for index in unique_indices:
        query = f"SELECT * FROM TV_SERIES_POPULAR_LIST LIMIT 1 OFFSET {index - 1}"
        cursor.execute(query)
        fetchedRow = cursor.fetchone()

        randSwitch = random.randint(0, 2)
        columns = [col[0] for col in cursor.description]
        labeledRow = dict(zip(columns, fetchedRow))

        query = "SELECT MAX(id) FROM TV_SERIES_POPULAR_LIST"
        cursor.execute(query)
        maxID = int(cursor.fetchone()[0])

        match randSwitch:
            case 0:  # delete row case
                delete_query = f"DELETE FROM TV_SERIES_POPULAR_LIST WHERE ID = {labeledRow['id']}"
                cursor.execute(delete_query)
                conn.commit()
                logger.info("Case 0: Row pk " + str(labeledRow['pk']) + " has been deleted: " + str(fetchedRow))
            case 1:  # update row case
                # add one random vote to the vote average
                new_vote_value = Decimal(round(random.random() * 10, 1))
                updated_vote_average = round(
                    (labeledRow['vote_count'] * labeledRow['vote_average'] + new_vote_value) / (
                            labeledRow['vote_count'] + 1), 1)

                update_query = f"UPDATE TV_SERIES_POPULAR_LIST SET vote_average = {updated_vote_average} WHERE ID = {labeledRow['id']}"
                cursor.execute(update_query)
                update_query = f"UPDATE TV_SERIES_POPULAR_LIST SET vote_count = {labeledRow['vote_count'] + 1} WHERE ID = {labeledRow['id']}"
                cursor.execute(update_query)
                conn.commit()
                logger.info(
                    "Case 1: Row " + str(labeledRow['pk']) + " has been updated with a new vote average of " + str(
                        updated_vote_average) + " and a new vote count of " + str(labeledRow['vote_count'] + 1) + str(
                        fetchedRow))
            case 2:  # create row case
                # generate random data for new row/show
                today = str(date.today())
                new_popularity = round(random.uniform(0.000, 10000), 3)
                new_vote_average = round(random.random() * 10, 1)
                new_vote_count = random.randint(1, 1000)
                new_id = maxID + 1
                new_name = "New Show " + str(new_popularity) + str(new_vote_average) + str(new_vote_count)

                new_row = {
                    "first_air_date": today,
                    "id": new_id,
                    "name": new_name,
                    "original_language": "en",
                    "original_name": new_name,
                    "overview": "This is a new random show generated by an AWS Lambda function",
                    "popularity": new_popularity,
                    "vote_average": new_vote_average,
                    "vote_count": new_vote_count
                }

                columns = ', '.join(new_row.keys())
                values = ', '.join([f"'{v}'" for v in new_row.values()])
                insert_query = f"INSERT INTO TV_SERIES_POPULAR_LIST ({columns}) VALUES ({values})"
                cursor.execute(insert_query)
                conn.commit()
                logger.info("Case 2: A new row/TV show has been created: " + str(new_row))

    return "Applied %d changes to RDS MySQL table" %randNumRows